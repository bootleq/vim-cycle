Describe Text classes
  Before all
    let g:cycle_max_conflict = 1
    let g:cycle_default_groups = [
          \   [['on', 'off']],
          \   [['Mon', 'Tue']],
          \   [['â—¯', 'âœ•']],
          \   [['â—¯â—¯', 'ðŸ‘€']],
          \   [['â—¯â—¯â—¯', 'ã‚´ã‚´ã‚´ã‚´']],
          \   [['Rails Metal', 'Thrash', 'Technical Death']],
          \ ]
  End

  Before each
    call cycle#test#clear_all_groups()
    call cycle#test#reinitialize_groups()
    new
  End

  After each
    bwipeout!
  End

  Context Word class ('w') phased search
    It takes whole word matching: word > char
      let line = 'Mon Tue'
      call setline(1, line)

      call cursor(1, 2) " on 'o'
      execute 'normal \a'
      Assert Equals(getline(1), 'Tue Tue', 'Matches "Tue" but not "on"')
    End

    It takes multibyte character matching: char > word
      let line = 'â—¯â—¯â—¯â—¯â–³'
      call setline(1, line)

      call setcursorcharpos(1, 2) " on 2nd 'â—¯'
      execute 'normal \a'
      Assert Equals(getline(1), 'â—¯âœ•â—¯â—¯â–³', 'Matches single "â—¯" but not "â—¯â—¯â—¯"')
    End

    It searchs current line if no matches: word > char > line (exist)
      let line = 'Is Technical Death Dead or Alive?'
      call setline(1, line)

      call search('De\zsath', 'W') " 'a' of Death
      execute 'normal \a'
      Assert Equals(getline(1), 'Is Rails metaL Dead or Alive?')
    End
  End

  Context Visual class ('v') search
    It takes whole selection matching only
      let line = 'Mon Tue'
      call setline(1, line)

      call cursor(1, 2) " on 'o'
      " Select 'on'
      normal! vl
      execute 'normal \a'
      Assert Equals(getline(1), 'Moff Tue', 'Matches "on" but not "Mon"')
      Assert Equals(mode(), 'v')
      normal! ""y
      Assert Equals(getreg('""'), 'off', 'Expect visual selected "off"')

      call setline(1, line) " Back to 'Mon Tue'
      call cursor(1, 2) " on 'o'
      " Select 'Mo'
      normal! vh
      execute 'normal \a'
      Assert Equals(getline(1), line, 'Expect unchanged')
    End

    It takes selected matching over shorter multibyte characters matches
      let line = 'â—¯â—¯â—¯â—¯â–³'
      call setline(1, line)

      call setcursorcharpos(1, 2) " on 2nd 'â—¯'
      " Select 'â—¯â—¯â—¯' (x3)
      normal! vll
      execute 'normal \a'
      Assert Equals(getline(1), 'â—¯ã‚´ã‚´ã‚´ã‚´â–³')
      Assert Equals(mode(), 'v')
      normal! ""y
      Assert Equals(getreg('""'), 'ã‚´ã‚´ã‚´ã‚´')
    End
  End
End
